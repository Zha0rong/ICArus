
####ICARus####
ICARus <- function(Matrix,numberofcomponents,iteration,numberofcores,vars.to.use=0.25,clustering_algorithm="complete",...) {
  require('GDAtools')
  require('coop')
  require('matrixStats')
  require('WGCNA')
  require('anticlust')
  require('Rfast')
  require('Rglpk')
  require('kneedle')
  source('ICARus_utils.R')
  WGCNA::enableWGCNAThreads(nThreads = numberofcores)

  faster_whiten=faster_ICA_whitening(Matrix)

  
  ICAResults=ParaICA(Matrix,numberofcomponents = numberofcomponents,iteration = iteration,numberofcores = numberofcores,...)
  print('Finished ParaICA')

  Signature.Matrix=as.matrix(ICAResults$Signature.Matrix)
  Affiliation.Matrix=as.matrix(ICAResults$Affiliation.Matrix)
  correlation=WGCNA::adjacency(as.matrix(Affiliation.Matrix),power = 1)
  Disimilarity.fixed=1-abs(correlation)
  Disimmilarity.Results=list()

  Group=stringr::str_split_fixed(colnames(Signature.Matrix),pattern = '_',n=2)[,1]
  names(Group)=colnames(Signature.Matrix)
  Matrix=Signature.Matrix
  Disimmilarity.Results$Clustering.results.item$clustering=Individual_Clustering(Matrix=Matrix,Group=Group,ncluster=numberofcomponents,method=clustering_algorithm)
  
  Medoids=GDAtools::medoids(as.dist(Disimilarity.fixed), Disimmilarity.Results$Clustering.results.item$clustering)
  Medoids=names(Disimmilarity.Results$Clustering.results.item$clustering)[Medoids]
  Clustered.Signature.matrix=Signature.Matrix[,Medoids]
  Clustered.Affiliation.matrix=Affiliation.Matrix[,Medoids]
  colnames(Clustered.Affiliation.matrix)=seq(1,ncol(Clustered.Affiliation.matrix))
  colnames(Clustered.Signature.matrix)=seq(1,ncol(Clustered.Signature.matrix))
  colnames(Clustered.Signature.matrix)=paste('signature.',colnames(Clustered.Signature.matrix),sep = '')
  colnames(Clustered.Affiliation.matrix)=paste('signature.',colnames(Clustered.Affiliation.matrix),sep = '')
  a=Cluster_Stability_Calculation(abs(correlation),Clustering_identity = Disimmilarity.Results$Clustering.results.item$clustering,numberofcores = 6)
  a=data.frame(ICs=rep(numberofcomponents,length(a)),ClusterNumber=names(a),QualityIndex=a)
  b=data.frame(table(Disimmilarity.Results$Clustering.results.item$clustering))
  rownames(b)=b$Var1
  colnames(b)=c('ClusterNumber','SignatureNumber')
  a=merge(a,b,by='ClusterNumber')
  Cluster.Quality=a
  rm(a,b)
  
  WGCNA::disableWGCNAThreads()
  
  for (i in 1:nrow(Cluster.Quality)) {
    if (Cluster.Quality$SignatureNumber[i]>iteration) {
      Cluster.Quality$QualityIndex[i]=Cluster.Quality$QualityIndex[i]#/(Cluster.Quality$SignatureNumber[i])
    }
    if (Cluster.Quality$SignatureNumber[i]<iteration) {
      Cluster.Quality$QualityIndex[i]=Cluster.Quality$QualityIndex[i]#(Cluster.Quality$SignatureNumber[i])
    } 
  }
  
  
  
  return(list(Clustered.Signature.matrix=Clustered.Signature.matrix,
              Clustered.Affiliation.matrix=Clustered.Affiliation.matrix,
              Cluster.Quality=Cluster.Quality,
              clustering=Disimmilarity.Results$Clustering.results.item$clustering
              ))
}





####Loop####
ICARus_est <- function(Matrix,parameter_set,vars.to.use=0.25,iteration=100,numberofcores=4,clustering_method=c('Hierachical'),clustering_algorithm='complete',...) {
  ICA.Tests.list=list()
  require('cluster')
  library('parallelDist')
  library('coop')
  require('WGCNA')
  require('matrixStats')
  require('fastkmedoids')
  require('factoextra')
  require('PCAtools')
  require('Rfast')
  require('Matrix')
  require('anticlust')
  require('corpcor')
  source('ICARus_utils.R')
  enableWGCNAThreads(nThreads = numberofcores)
  
  
  QC.Metrics=data.frame(ICs=parameter_set)
  QC.Metrics$IR=0
  QC.Metrics$MSE=0
  faster_whiten=faster_ICA_whitening(Matrix)
  
  for (i in parameter_set){
    print(i)
    temp=faster_whiten
    temp$K <- matrix(temp$K[1:i, ], i, temp$p)
    temp$X1 <- mat.mult(temp$K, temp$X)
    
    #ICAResults=ParaICA_bootstrap(CountMatrix = Matrix ,numberofcomponents = i,iteration=iteration,numberofcores = numberofcores,...)
    ICAResults=ParaICA(CountMatrix = Matrix,faster_whiten =  temp,numberofcomponents = i,iteration=iteration,numberofcores = numberofcores,...)
    Signature.Matrix=ICAResults$Signature.Matrix
    Affiliation.Matrix=ICAResults$Affiliation.Matrix
    correlation=WGCNA::adjacency(as.matrix(Affiliation.Matrix),power = 1)

    Disimilarity.fixed=1-abs(correlation)
    Disimmilarity.Results=list()
    
    Group=stringr::str_split_fixed(colnames(Signature.Matrix),pattern = '_',n=2)[,1]
    names(Group)=colnames(Signature.Matrix)

    Disimmilarity.Results$Clustering.results.item$clustering=Individual_Clustering(Matrix=Signature.Matrix,Group=Group,ncluster=i,method=clustering_algorithm)
    
    
    
    Results=Cluster_Stability_Calculation(abs(correlation),Clustering_identity = Disimmilarity.Results$Clustering.results$clustering,numberofcores = numberofcores)


    Results=data.frame(ICs=rep(i,length(Results)),ClusterNumber=names(Results),QualityIndex=Results)
    b=data.frame(table(Disimmilarity.Results$Clustering.results$clustering))
    rownames(b)=b$Var1
    colnames(b)=c('ClusterNumber','SignatureNumber')
    Results=merge(Results,b,by='ClusterNumber')
    ICA.Tests.list[[i]]=Results
  }
  WGCNA::disableWGCNAThreads()
  ICA.Tests=ICA.Tests.list
  ICA.Tests=do.call(rbind,ICA.Tests)
  for (i in 1:nrow(ICA.Tests)) {
    if (ICA.Tests$SignatureNumber[i]>iteration) {
      ICA.Tests$QualityIndex[i]=ICA.Tests$QualityIndex[i]/(ICA.Tests$SignatureNumber[i]/iteration)
    }
    if (ICA.Tests$SignatureNumber[i]<iteration) {
      ICA.Tests$QualityIndex[i]=ICA.Tests$QualityIndex[i]*(ICA.Tests$SignatureNumber[i]/iteration)
    } 
  }
  ICA.Tests.median=aggregate(QualityIndex~ICs,data=ICA.Tests,median)
  ICA.Tests.mean=aggregate(QualityIndex~ICs,data=ICA.Tests,mean)
  return(list(ICA.Tests.results=ICA.Tests,
              ICA.Tests.median=ICA.Tests.median,
              ICA.Tests.mean=ICA.Tests.mean,
              QC.Metrics=QC.Metrics))


}









####PCAEstimation####
PCA.Estimation <- function(Counts.Matrix=NULL,lowerboundsofvariancetouse=0.1,upperboundsofvariancetouse=1,step=0.1) {
  require(kneedle)
  top_var=matrixStats::rowVars(Counts.Matrix,useNames = T)
  top_var=(top_var[order(top_var,decreasing = T)])
  Results=data.frame(VariancetoUse=seq(lowerboundsofvariancetouse,upperboundsofvariancetouse,step))
  Results$Number.of.PC=0
  
  
  
  for (i in 1:nrow(Results)) {
    PCA=prcomp(t(Counts.Matrix[names(top_var)[seq(1,as.integer(length(top_var)*Results$VariancetoUse[i]))],]),center=F,scale.=F)
    PCA.summary=summary(PCA)
    PCA.candidates=PCA.summary$importance[1,][order(PCA.summary$importance[1,],decreasing = T)]
    point=diff(smooth(PCA.candidates))*(-1)
    point=which(point>=mean(point[point>0]))
    point=point[point<=0.5*ncol(Counts.Matrix)]
    Results$Number.of.PC[i]=kneedle(seq(1,length(PCA.candidates)),y = PCA.candidates)[1]#point[point==max(point)]
    print(i)
  }
  return(Results)
}


####Invidivual_Clustering####

